# 1 "asymmetry-det.p4"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "asymmetry-det.p4"

# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/core.p4"
error {
    NoError,
    PacketTooShort,
    NoMatch,
    StackOutOfBounds,
    HeaderTooShort,
    ParserTimeout
}

extern packet_in {



    void extract<T>(out T hdr);




    void extract<T>(out T variableSizeHeader,
                    in bit<32> variableFieldSizeInBits);



    T lookahead<T>();

    void advance(in bit<32> sizeInBits);


    bit<32> length();
}

extern packet_out {



    void emit<T>(in T hdr);
}




extern void verify(in bool check, in error toSignal);


action NoAction() {}




match_kind {

    exact,

    ternary,

    lpm
}
# 3 "asymmetry-det.p4" 2
# 1 "/usr/local/share/p4c/p4include/v1model.p4" 1
# 22 "/usr/local/share/p4c/p4include/v1model.p4"
# 1 "/usr/local/share/p4c/p4include/core.p4" 1
# 23 "/usr/local/share/p4c/p4include/v1model.p4" 2

match_kind {
    range,

    selector
}


@metadata @name("standard_metadata")
struct standard_metadata_t {
    bit<9> ingress_port;
    bit<9> egress_spec;
    bit<9> egress_port;
    bit<32> clone_spec;
    bit<32> instance_type;
    bit<1> drop;
    bit<16> recirculate_port;
    bit<32> packet_length;
# 50 "/usr/local/share/p4c/p4include/v1model.p4"
    @alias("queueing_metadata.enq_timestamp") bit<32> enq_timestamp;
    @alias("queueing_metadata.enq_qdepth") bit<19> enq_qdepth;
    @alias("queueing_metadata.deq_timedelta") bit<32> deq_timedelta;
    @alias("queueing_metadata.deq_qdepth") bit<19> deq_qdepth;

    @alias("intrinsic_metadata.ingress_global_timestamp") bit<48> ingress_global_timestamp;
    @alias("intrinsic_metadata.egress_global_timestamp") bit<48> egress_global_timestamp;
    @alias("intrinsic_metadata.lf_field_list") bit<32> lf_field_list;
    @alias("intrinsic_metadata.mcast_grp") bit<16> mcast_grp;
    @alias("intrinsic_metadata.resubmit_flag") bit<32> resubmit_flag;
    @alias("intrinsic_metadata.egress_rid") bit<16> egress_rid;

    bit<1> checksum_error;
    @alias("intrinsic_metadata.recirculate_flag") bit<32> recirculate_flag;
}

enum CounterType {
    packets,
    bytes,
    packets_and_bytes
}

enum MeterType {
    packets,
    bytes
}

extern counter {
    counter(bit<32> size, CounterType type);
    void count(in bit<32> index);
}

extern direct_counter {
    direct_counter(CounterType type);
    void count();
}

extern meter {
    meter(bit<32> size, MeterType type);
    void execute_meter<T>(in bit<32> index, out T result);
}

extern direct_meter<T> {
    direct_meter(MeterType type);
    void read(out T result);
}

extern register<T> {
    register(bit<32> size);
    void read(out T result, in bit<32> index);
    void write(in bit<32> index, in T value);
}


extern action_profile {
    action_profile(bit<32> size);
}


extern void random<T>(out T result, in T lo, in T hi);


extern void digest<T>(in bit<32> receiver, in T data);

enum HashAlgorithm {
    crc32,
    crc32_custom,
    crc16,
    crc16_custom,
    random,
    identity,
    csum16,
    xor16
}

extern void mark_to_drop();
extern void hash<O, T, D, M>(out O result, in HashAlgorithm algo, in T base, in D data, in M max);

extern action_selector {
    action_selector(HashAlgorithm algorithm, bit<32> size, bit<32> outputWidth);
}

enum CloneType {
    I2E,
    E2E
}

@deprecated("Please use verify_checksum/update_checksum instead.")
extern Checksum16 {
    Checksum16();
    bit<16> get<D>(in D data);
}
# 156 "/usr/local/share/p4c/p4include/v1model.p4"
extern void verify_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 168 "/usr/local/share/p4c/p4include/v1model.p4"
extern void update_checksum<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 184 "/usr/local/share/p4c/p4include/v1model.p4"
extern void verify_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);
# 197 "/usr/local/share/p4c/p4include/v1model.p4"
extern void update_checksum_with_payload<T, O>(in bool condition, in T data, inout O checksum, HashAlgorithm algo);

extern void resubmit<T>(in T data);
extern void recirculate<T>(in T data);
extern void clone(in CloneType type, in bit<32> session);
extern void clone3<T>(in CloneType type, in bit<32> session, in T data);

extern void truncate(in bit<32> length);







parser Parser<H, M>(packet_in b,
                    out H parsedHdr,
                    inout M meta,
                    inout standard_metadata_t standard_metadata);





control VerifyChecksum<H, M>(inout H hdr,
                             inout M meta);
@pipeline
control Ingress<H, M>(inout H hdr,
                      inout M meta,
                      inout standard_metadata_t standard_metadata);
@pipeline
control Egress<H, M>(inout H hdr,
                     inout M meta,
                     inout standard_metadata_t standard_metadata);





control ComputeChecksum<H, M>(inout H hdr,
                              inout M meta);
@deparser
control Deparser<H>(packet_out b, in H hdr);

package V1Switch<H, M>(Parser<H, M> p,
                       VerifyChecksum<H, M> vr,
                       Ingress<H, M> ig,
                       Egress<H, M> eg,
                       ComputeChecksum<H, M> ck,
                       Deparser<H> dep
                       );
# 4 "asymmetry-det.p4" 2

const bit<16> TYPE_IPV4 = 0x800;
const bit<8> TYPE_TCP = 6;





typedef bit<9> egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<32> ip4Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16> etherType;
}

header ipv4_t {
    bit<4> version;
    bit<4> ihl;
    bit<8> diffserv;
    bit<16> totalLen;
    bit<16> identification;
    bit<3> flags;
    bit<13> fragOffset;
    bit<8> ttl;
    bit<8> protocol;
    bit<16> hdrChecksum;
    ip4Addr_t srcAddr;
    ip4Addr_t dstAddr;
}



struct metadata {

}

struct headers {
    ethernet_t ethernet;
    ipv4_t ipv4;
}





parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV4: parse_ipv4;
            default: accept;
        }
    }

    state parse_ipv4 {
        packet.extract(hdr.ipv4);
        transition accept;
    }


}





control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply { }
}






control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {





    bit<48> time_threshold = 10000000000000;




    register<bit<32>>(1) flow_into_my_host;
    register<bit<32>>(1) flow_out_to_other_host;
    register<bit<32>>(1) flow_ratio;
    register<bit<48>>(1) time_diff;

    bit<32> count_packets_in = 1;
    bit<32> count_packets_out = 1;

    register<bit<48>>(1) counter_start_time;


    action drop() {
        mark_to_drop();
    }

    action ipv4_forward(macAddr_t dstAddr, egressSpec_t port) {
        standard_metadata.egress_spec = port;
        hdr.ethernet.srcAddr = hdr.ethernet.dstAddr;
        hdr.ethernet.dstAddr = dstAddr;
        hdr.ipv4.ttl = hdr.ipv4.ttl - 1;
    }


    table ipv4_lpm {
        key = {
            hdr.ipv4.dstAddr: lpm;
        }
        actions = {
            ipv4_forward;
            drop;
            NoAction;
        }
        size = 1024;
        default_action = drop();
    }


    apply {
        if (hdr.ipv4.isValid()) {
            bit<48> start_time = 0;
            counter_start_time.read(start_time, 0);
            flow_into_my_host.read(count_packets_in, 0);
            flow_out_to_other_host.read(count_packets_out, 0);
            if (start_time == 0) {

                counter_start_time.write(0, standard_metadata.ingress_global_timestamp);

                flow_into_my_host.write(0, 1);
                flow_out_to_other_host.write(0, 1);
            }
         if (hdr.ipv4.dstAddr == 0x0a000101) {

                count_packets_in = count_packets_in + 1;
                flow_into_my_host.write(0, count_packets_in);
            }
            if (hdr.ipv4.dstAddr == 0x0a000102) {

                count_packets_out = count_packets_out + 1;
                flow_out_to_other_host.write(0, count_packets_out);
            }
            if (standard_metadata.ingress_global_timestamp - start_time >= time_threshold) {





                bit<32> quotient = 0;
                bit<32> remainder = 0;
                if (count_packets_in != 0) {
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[31:31];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[31:31] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[30:30];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[30:30] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[29:29];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[29:29] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[28:28];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[28:28] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[27:27];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[27:27] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[26:26];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[26:26] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[25:25];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[25:25] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[24:24];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[24:24] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[23:23];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[23:23] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[22:22];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[22:22] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[21:21];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[21:21] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[20:20];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[20:20] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[19:19];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[19:19] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[18:18];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[18:18] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[17:17];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[17:17] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[16:16];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[16:16] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[15:15];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[15:15] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[14:14];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[14:14] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[13:13];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[13:13] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[12:12];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[12:12] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[11:11];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[11:11] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[10:10];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[10:10] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[9:9];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[9:9] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[8:8];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[8:8] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[7:7];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[7:7] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[6:6];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[6:6] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[5:5];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[5:5] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[4:4];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[4:4] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[3:3];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[3:3] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[2:2];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[2:2] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[1:1];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[1:1] = 1;
                    }
                    remainder = remainder << 1;
                    remainder[0:0] = count_packets_out[0:0];
                    if (remainder >= count_packets_in) {
                        remainder = remainder - count_packets_in;
                        quotient[0:0] = 1;
                    }
                    flow_ratio.write(0, quotient);
                }
                else {
                    flow_ratio.write(0, quotient);
                }

                count_packets_in = 1;
                flow_into_my_host.write(0, count_packets_in);
                count_packets_out = 1;
                flow_out_to_other_host.write(0, count_packets_out);
                counter_start_time.write(0, standard_metadata.ingress_global_timestamp);
            }
            time_diff.write(0, standard_metadata.ingress_global_timestamp - start_time);
            ipv4_lpm.apply();
        }
    }
}





control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {
    apply { }
}





control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {
 update_checksum(
     hdr.ipv4.isValid(),
            { hdr.ipv4.version,
       hdr.ipv4.ihl,
              hdr.ipv4.diffserv,
              hdr.ipv4.totalLen,
              hdr.ipv4.identification,
              hdr.ipv4.flags,
              hdr.ipv4.fragOffset,
              hdr.ipv4.ttl,
              hdr.ipv4.protocol,
              hdr.ipv4.srcAddr,
              hdr.ipv4.dstAddr },
            hdr.ipv4.hdrChecksum,
            HashAlgorithm.csum16);
    }
}





control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv4);
    }
}





V1Switch(
MyParser(),
MyVerifyChecksum(),
MyIngress(),
MyEgress(),
MyComputeChecksum(),
MyDeparser()
) main;
